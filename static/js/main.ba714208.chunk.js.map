{"version":3,"sources":["algorithms/BubbleSort.js","algorithms/QuickSort.js","Components/Sorting.js","App.js","serviceWorker.js","index.js"],"names":["BubbleSort","arr","animate","i","length","j","push","num1","num2","temp","swap","items","leftIndex","rightIndex","QuickSort","array","quickSort","left","right","index","pivot","Math","floor","partition","SortingTry","useState","numberArray","setNumberArray","windowWidth","setWindowWidth","windowHeight","setWindowHeight","value","generateNewArray","n","max","random","useEffect","window","innerWidth","innerHeight","AnimateFunc","data","bars","document","querySelectorAll","console","log","barOne","style","barTwo","setTimeout","height","className","map","item","idx","key","onClick","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba714208.chunk.js","sourcesContent":["const BubbleSort = arr => {\r\n    const animate = [{}];\r\n    for(var i = 0;i<arr.length;i++)\r\n    {\r\n        for(var j = 0;j<arr.length;j++)\r\n        {\r\n            if(arr[i]<arr[j])\r\n            {\r\n                animate.push({num1:i,num2:j});\r\n                var temp = arr[i];\r\n                arr[i] = arr[j];\r\n                arr[j] = temp;\r\n            }\r\n        }\r\n    }\r\n    // console.log(arr);\r\n    // console.log(animate.length);\r\n    const newdata = [arr,animate];\r\n    //console.log(newdata);\r\n    return newdata;\r\n}\r\n\r\nexport default BubbleSort;","const QuickSort = array => {\r\n    const animate = [{}];    \r\n    const sortedArr = quickSort(array,0,array.length-1,animate);\r\n    return [sortedArr, animate];\r\n}\r\n\r\nfunction swap(items, leftIndex, rightIndex,animate){\r\n    animate.push({num1:leftIndex,num2:rightIndex});\r\n    var temp = items[leftIndex];\r\n    items[leftIndex] = items[rightIndex];\r\n    items[rightIndex] = temp;\r\n}\r\nfunction partition(items, left, right,animate) {\r\n    var pivot   = items[Math.floor((right + left) / 2)], //middle element\r\n        i       = left, //left pointer\r\n        j       = right; //right pointer\r\n    while (i <= j) {\r\n        while (items[i] < pivot) {\r\n            i++;\r\n        }\r\n        while (items[j] > pivot) {\r\n            j--;\r\n        }\r\n        if (i <= j) {\r\n            swap(items, i, j,animate); //sawpping two elements\r\n            i++;\r\n            j--;\r\n        }\r\n    }\r\n    return i;\r\n}\r\n\r\nfunction quickSort(items, left, right,animate) {\r\n    var index;\r\n    if (items.length > 1) {\r\n        index = partition(items, left, right,animate); //index returned from partition\r\n        if (left < index - 1) { //more elements on the left side of the pivot\r\n            quickSort(items, left, index - 1,animate);\r\n        }\r\n        if (index < right) { //more elements on the right side of the pivot\r\n            quickSort(items, index, right,animate);\r\n        }\r\n    }\r\n    return items;\r\n}\r\n\r\nexport default QuickSort;","import React, { useState, useEffect } from \"react\";\r\nimport \"./Sorting.css\";\r\nimport BubbleSort from './../algorithms/BubbleSort';\r\nimport QuickSort from \"../algorithms/QuickSort\";\r\n\r\nconst SortingTry = () => {\r\n  const [numberArray, setNumberArray] = useState([]);\r\n  const [windowWidth, setWindowWidth] = useState();\r\n  const [windowHeight, setWindowHeight] = useState();\r\n  const value = [];\r\n\r\n  const generateNewArray = () => {\r\n\r\n    var n = Math.floor((windowWidth*175) / 1500);\r\n    var min = 5;\r\n    var max = Math.floor((windowHeight*400) / 750);\r\n    for (var i = 0; i < n; i++) {\r\n      value.push(Math.floor(Math.random() * (max - min + 1) + min));\r\n    }\r\n    setNumberArray([...value]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setWindowWidth(window.innerWidth);\r\n    setWindowHeight(window.innerHeight);\r\n    generateNewArray();\r\n  }, [windowWidth,windowHeight]);\r\n\r\n  const AnimateFunc = (data) => {\r\n    const bars = document.querySelectorAll('.bar-item');\r\n    console.log(bars.length);\r\n\r\n    for (var i = 1; i < data.length; i++) {\r\n      console.log(data[i].num1);\r\n      const barOne = bars[data[i].num1].style;\r\n      const barTwo = bars[data[i].num2].style;\r\n      setTimeout((i) => {\r\n        const height = barOne.height;\r\n        barOne.height = barTwo.height;\r\n        barTwo.height = height;\r\n      }, i * 5);\r\n    }\r\n  }\r\n  const Quick = () => {\r\n    const data = QuickSort(numberArray);\r\n    AnimateFunc(data[1]);\r\n  }\r\n\r\n  const Bubble = () => {\r\n    const data = BubbleSort(numberArray);\r\n    AnimateFunc(data[1]);\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"div-bar\">\r\n      <div className=\"bar-wrapper\">\r\n        {numberArray.map((item, idx) => {\r\n          return (\r\n            <div\r\n              className=\"bar-item\"\r\n              key={idx}\r\n              style={{ height: `${item}px` }}\r\n            ></div>\r\n          );\r\n        })}\r\n      </div>\r\n      <button onClick={generateNewArray}>Generate New Array</button>\r\n      <button onClick={Bubble}>Bubble Sort</button>\r\n      <button onClick={Quick}>Quick Sort</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SortingTry;\r\n","import React from 'react';\nimport Sorting from './Components/Sorting';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Sorting></Sorting>      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}